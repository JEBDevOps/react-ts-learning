name: Deploy to Amazon ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push-image:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: react-ts-app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ec2:
    name: Deploy to EC2 via SSM Run Command
    runs-on: ubuntu-latest
    needs: build-and-push-image
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Send deployment command to EC2 instance
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying new image ${{ needs.build-and-push-image.outputs.image_uri }}" \
            --parameters '{"commands":[
              "# --- Deployment Script for my-app ---",
              "# 1. Login to ECR using the EC2 instance role",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com",
              "",
              "# 2. Pull the new Docker image from ECR",
              "docker pull ${{ needs.build-and-push-image.outputs.image_uri }}",
              "",
              "# 3. Stop and remove the existing container (|| true prevents script failure if container does not exist)",
              "docker stop react-ts-app || true",
              "docker rm react-ts-app || true",
              "",
              "# 4. Run the new container with the updated image",
              "docker run -d --name react-ts-app --restart always -p 80:80 ${{ needs.build-and-push-image.outputs.image_uri }}"
            ]}'
